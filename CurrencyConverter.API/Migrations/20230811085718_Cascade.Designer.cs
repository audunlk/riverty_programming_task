// <auto-generated />
using System;
using CurrencyConverter.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyConverter.API.Migrations
{
    [DbContext(typeof(ExchangeRateDbContext))]
    [Migration("20230811085718_Cascade")]
    partial class Cascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencyConverter.API.Models.ErrorTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResponseStatusId")
                        .IsUnique();

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("CurrencyConverter.API.Models.RatesTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("ResponseStatusId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("CurrencyConverter.API.Models.ResponseStatusTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ResponseStatus");
                });

            modelBuilder.Entity("CurrencyConverter.API.Models.ErrorTable", b =>
                {
                    b.HasOne("CurrencyConverter.API.Models.ResponseStatusTable", "ResponseStatus")
                        .WithOne("Error")
                        .HasForeignKey("CurrencyConverter.API.Models.ErrorTable", "ResponseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponseStatus");
                });

            modelBuilder.Entity("CurrencyConverter.API.Models.RatesTable", b =>
                {
                    b.HasOne("CurrencyConverter.API.Models.ResponseStatusTable", "ResponseStatus")
                        .WithMany("Rates")
                        .HasForeignKey("ResponseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResponseStatus");
                });

            modelBuilder.Entity("CurrencyConverter.API.Models.ResponseStatusTable", b =>
                {
                    b.Navigation("Error")
                        .IsRequired();

                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
